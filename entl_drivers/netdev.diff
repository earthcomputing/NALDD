2c2
<  * Copyright(c) 1999 - 2016 Intel Corporation.
---
>  * Copyright(c) 1999 - 2017 Intel Corporation.
48,49d47
< #define _IN_NETDEV_C_
< 
53c51
< #define DRV_EXTRAVERSION "-NAPI-ENTL4"
---
> #define DRV_EXTRAVERSION "" "-NAPI"
55c53
< #define DRV_EXTRAVERSION "-ENTL4"
---
> #define DRV_EXTRAVERSION ""
58c56
< #define DRV_VERSION "3.3.4" DRV_EXTRAVERSION
---
> #define DRV_VERSION "3.4.0.2" DRV_EXTRAVERSION
80a79
> 	[board_pch_cnp]		= &e1000_pch_cnp_info,
250,252c249,251
< 		pr_info("Device Name     state            trans_start      last_rx\n");
< 		pr_info("%-15s %016lX %016lX %016lX\n", netdev->name,
< 			netdev->state, netdev->trans_start, netdev->last_rx);
---
> 		pr_info("Device Name     state            trans_start\n");
> 		pr_info("%-15s %016lX %016lX\n", netdev->name,
> 			netdev->state, dev_trans_start(netdev));
327,328c326,327
< 			(!(le64_to_cpu(u0->b) & (1 << 29)) ? 'l' :
< 			 ((le64_to_cpu(u0->b) & (1 << 20)) ? 'd' : 'c')),
---
> 			(!(le64_to_cpu(u0->b) & BIT(29)) ? 'l' :
> 			 ((le64_to_cpu(u0->b) & BIT(20)) ? 'd' : 'c')),
714c713
< 				   int cleaned_count, gfp_t gfp)
---
> 				   int cleaned_count, gfp_t __maybe_unused gfp)
805c804,805
< 				      int cleaned_count, gfp_t gfp)
---
> 				      int cleaned_count,
> 				      gfp_t __maybe_unused gfp)
911c911,912
< 					 int cleaned_count, gfp_t gfp)
---
> 					 int cleaned_count,
> 					 gfp_t __maybe_unused gfp)
1102,1126d1102
< 		// AK: Process ENTL packet for RX data
< 		if( adapter->entl_flag ) {
< 			skb_put(skb, length);
< 			if( !entl_device_process_rx_packet( &adapter->entl_dev, skb ) )
< 			{
< 				// This packet is ENTL message only. Not forward to upper layer
< 				buffer_info->skb = skb; // recycle
< 				goto next_desc;
< 			}	
< 			else {
< 				struct ethhdr *eth = (struct ethhdr *)skb->data ;
< 				//ENTL_DEBUG("%s e1000_clean_rx_irq got message_len %d skb %p\n", netdev->name, length, skb );
< 				if( eth->h_proto != ETH_P_ECLP && eth->h_proto != ETH_P_ECLD ) {
< 					ENTL_DEBUG("%s e1000_clean_rx_irq dropping non EC type %4x %p len %d d: %02x %02x %02x %02x %02x %02x  %02x %02x %02x %02x %02x %02x  %02x%02x %02x %02x %02x %02x %02x %02x\n", netdev->name, eth->h_proto, skb, length,
< 					  skb->data[0], skb->data[1], skb->data[2], skb->data[3], skb->data[4], skb->data[5], 
< 					  skb->data[6], skb->data[7], skb->data[8], skb->data[9], skb->data[10], skb->data[11], 
< 					  skb->data[12], skb->data[13],
< 					  skb->data[14], skb->data[15], skb->data[16], skb->data[17], skb->data[18], skb->data[19]
< 					  ) ;
< 					buffer_info->skb = skb; // recycle
< 					goto next_desc;
< 				}
< 			}
< 		}
< 
1151d1126
< 		//ENTL_DEBUG("%s e1000_clean_rx_irq end copybreak code %d skb %p\n", netdev->name, length, skb );
1162d1136
< 		//ENTL_DEBUG("%s e1000_clean_rx_irq calling e1000_receive_skb %d skb %p\n", netdev->name, length, skb );
1168d1141
< 		//ENTL_DEBUG("%s e1000_clean_rx_irq next_desc: %d skb %p\n", netdev->name, length, skb );
1320a1294
> 		struct sk_buff *skb = adapter->tx_hwtstamp_skb;
1329,1330c1303,1305
< 		skb_tstamp_tx(adapter->tx_hwtstamp_skb, &shhwtstamps);
< 		dev_kfree_skb_any(adapter->tx_hwtstamp_skb);
---
> 		/* Clear the global tx_hwtstamp_skb pointer and force writes
> 		 * prior to notifying the stack of a Tx timestamp.
> 		 */
1331a1307,1310
> 		wmb();		/* force write prior to skb_tstamp_tx */
> 
> 		skb_tstamp_tx(skb, &shhwtstamps);
> 		dev_kfree_skb_any(skb);
1531,1540d1509
< 		// AK: Process ENTL packet for RX data
< 		if( adapter->entl_flag ) {
< 			if( !entl_device_process_rx_packet( &adapter->entl_dev, skb ) )
< 			{
< 				// This packet is ENTL message only. Not forward to upper layer
< 				dev_kfree_skb_irq(skb);
< 				goto next_desc;
< 			}	
< 		}
< 
1750,1760d1718
< 
< 		// AK: Process ENTL packet for RX data
< 		if( adapter->entl_flag ) {
< 			if( !entl_device_process_rx_packet( &adapter->entl_dev, skb ) )
< 			{
< 				// This packet is ENTL message only. Not forward to upper layer
< 				buffer_info->skb = skb; // recycle
< 				goto next_desc;
< 			}	
< 		}
< 
2008,2009d1965
< 			ENTL_DEBUG("e1000_intr_msi on %s, setting FLAG_RESTART_NOW\n", adapter->netdev->name );
< 		
2018,2019c1974
< 	if ((icr & E1000_ICR_ECCER) && ((hw->mac.type == e1000_pch_lpt) ||
< 					(hw->mac.type == e1000_pch_spt))) {
---
> 	if ((icr & E1000_ICR_ECCER) && (hw->mac.type >= e1000_pch_lpt)) {
2113d2067
< 			ENTL_DEBUG("e1000_intr on %s, setting FLAG_RESTART_NOW\n", adapter->netdev->name );
2122,2123c2076
< 	if ((icr & E1000_ICR_ECCER) && ((hw->mac.type == e1000_pch_lpt) ||
< 					(hw->mac.type == e1000_pch_spt))) {
---
> 	if ((icr & E1000_ICR_ECCER) && (hw->mac.type >= e1000_pch_lpt)) {
2177,2178c2130
< 		// AK: try to set E1000_IMS_LSC 
< 		ew32(IMS, E1000_IMS_OTHER | E1000_IMS_LSC );
---
> 		ew32(IMS, E1000_IMS_OTHER);
2180,2184d2131
< 	//{
< 	//	u32 ims ;
< 	//	ims = er32(IMS) ;
< 	//	ENTL_DEBUG("e1000_msix_other %s is called on %d, triggering watchdog ims %08x \n", netdev->name, test_bit(__E1000_DOWN, &adapter->state), ims );
< 	//}
2310c2257
< 	ivar |= (1 << 31);
---
> 	ivar |= BIT(31);
2399,2404c2346,2347
< 	if (strlen(netdev->name) < (IFNAMSIZ - 5))
< 		snprintf(adapter->rx_ring->name,
< 			 sizeof(adapter->rx_ring->name) - 1,
< 			 "%s-rx-0", netdev->name);
< 	else
< 		memcpy(adapter->rx_ring->name, netdev->name, IFNAMSIZ);
---
> 	snprintf(adapter->rx_ring->name,
> 		 sizeof(adapter->rx_ring->name), "%s-rx-0", netdev->name);
2415,2420c2358,2359
< 	if (strlen(netdev->name) < (IFNAMSIZ - 5))
< 		snprintf(adapter->tx_ring->name,
< 			 sizeof(adapter->tx_ring->name) - 1,
< 			 "%s-tx-0", netdev->name);
< 	else
< 		memcpy(adapter->tx_ring->name, netdev->name, IFNAMSIZ);
---
> 	snprintf(adapter->tx_ring->name,
> 		 sizeof(adapter->tx_ring->name), "%s-tx-0", netdev->name);
2533,2534c2472
< 	} else if ((hw->mac.type == e1000_pch_lpt) ||
< 		   (hw->mac.type == e1000_pch_spt)) {
---
> 	} else if (hw->mac.type >= e1000_pch_lpt) {
3043c2981
< 		vfta |= (1 << (vid & 0x1F));
---
> 		vfta |= BIT((vid & 0x1F));
3111c3049
< 		vfta &= ~(1 << (vid & 0x1F));
---
> 		vfta &= ~BIT((vid & 0x1F));
3172c3110
<  * e1000e_vlan_strip_enable - helper to disable HW VLAN stripping
---
>  * e1000e_vlan_strip_disable - helper to disable HW VLAN stripping
3358c3296
< 				manc2h |= (1 << i);
---
> 				manc2h |= BIT(i);
3371c3309
< 				manc2h |= (1 << 1);
---
> 				manc2h |= BIT(1);
3445c3383
< #define SPEED_MODE_BIT (1 << 21)
---
> #define SPEED_MODE_BIT BIT(21)
3474c3412
< 	/* SPT Si errata workaround to avoid data corruption */
---
> 	/* SPT and KBL Si errata workaround to avoid data corruption */
3483c3421,3423
< 		reg_val |= E1000_TARC0_CB_MULTIQ_3_REQ;
---
> 		/* SPT and KBL Si errata workaround to avoid Tx hang */
> 		reg_val &= ~E1000_TARC0_CB_MULTIQ_3_REQ;
> 		reg_val |= E1000_TARC0_CB_MULTIQ_2_REQ;
3546c3486
< 		phy_data |= (1 << 2);
---
> 		phy_data |= BIT(2);
3550c3490
< 		mac_data |= (1 << 17);
---
> 		mac_data |= BIT(17);
3556c3496
< 			phy_data |= (1 << 14);
---
> 			phy_data |= BIT(14);
3879c3819
< 			int rval;
---
> 			int ret_val;
3884c3824,3825
< 			rval = hw->mac.ops.rar_set(hw, ha->addr, rar_entries--);
---
> 			ret_val = hw->mac.ops.rar_set(hw, ha->addr,
> 						      rar_entries--);
3886,3887c3827,3828
< 			rval = hw->mac.ops.rar_set(hw, ha->da_addr,
< 						   rar_entries--);
---
> 			ret_val = hw->mac.ops.rar_set(hw, ha->da_addr,
> 						      rar_entries--);
3889c3830
< 			if (rval < 0)
---
> 			if (ret_val < 0)
3930,3931c3871
< 	// AK: ENTL mode always use promiscuous mode
< 	if (adapter->entl_flag || netdev->flags & IFF_PROMISC) {
---
> 	if (netdev->flags & IFF_PROMISC) {
4018a3959
> #ifdef HAVE_PTP_1588_CLOCK
4027,4029d3967
< #ifndef HAVE_PTP_1588_CLOCK
< static
< #endif
4038,4039c3976
< 	if (((hw->mac.type == e1000_pch_lpt) ||
< 	     (hw->mac.type == e1000_pch_spt)) &&
---
> 	if ((hw->mac.type >= e1000_pch_lpt) &&
4044,4045c3981,3982
< 		if (!(fextnvm7 & (1 << 0))) {
< 			ew32(FEXTNVM7, fextnvm7 | (1 << 0));
---
> 		if (!(fextnvm7 & BIT(0))) {
> 			ew32(FEXTNVM7, fextnvm7 | BIT(0));
4051a3989,3994
> 		/* Stable 96MHz frequency */
> 		incperiod = INCPERIOD_96MHZ;
> 		incvalue = INCVALUE_96MHZ;
> 		shift = INCVALUE_SHIFT_96MHZ;
> 		adapter->cc.shift = shift + INCPERIOD_SHIFT_96MHZ;
> 		break;
4055,4058c3998,4001
< 			incperiod = INCPERIOD_96MHz;
< 			incvalue = INCVALUE_96MHz;
< 			shift = INCVALUE_SHIFT_96MHz;
< 			adapter->cc.shift = shift + INCPERIOD_SHIFT_96MHz;
---
> 			incperiod = INCPERIOD_96MHZ;
> 			incvalue = INCVALUE_96MHZ;
> 			shift = INCVALUE_SHIFT_96MHZ;
> 			adapter->cc.shift = shift + INCPERIOD_SHIFT_96MHZ;
4061,4063c4004,4006
< 			incperiod = INCPERIOD_25MHz;
< 			incvalue = INCVALUE_25MHz;
< 			shift = INCVALUE_SHIFT_25MHz;
---
> 			incperiod = INCPERIOD_25MHZ;
> 			incvalue = INCVALUE_25MHZ;
> 			shift = INCVALUE_SHIFT_25MHZ;
4070,4072c4013,4015
< 			incperiod = INCPERIOD_24MHz;
< 			incvalue = INCVALUE_24MHz;
< 			shift = INCVALUE_SHIFT_24MHz;
---
> 			incperiod = INCPERIOD_24MHZ;
> 			incvalue = INCVALUE_24MHZ;
> 			shift = INCVALUE_SHIFT_24MHZ;
4076a4020,4034
> 	case e1000_pch_cnp:
> 		if (er32(TSYNCRXCTL) & E1000_TSYNCRXCTL_SYSCFI) {
> 			/* Stable 24MHz frequency */
> 			incperiod = INCPERIOD_24MHZ;
> 			incvalue = INCVALUE_24MHZ;
> 			shift = INCVALUE_SHIFT_24MHZ;
> 			adapter->cc.shift = shift;
> 		} else {
> 			/* Stable 38400KHz frequency */
> 			incperiod = INCPERIOD_38400KHZ;
> 			incvalue = INCVALUE_38400KHZ;
> 			shift = INCVALUE_SHIFT_38400KHZ;
> 			adapter->cc.shift = shift;
> 		}
> 		break;
4080,4082c4038,4040
< 		incperiod = INCPERIOD_25MHz;
< 		incvalue = INCVALUE_25MHz;
< 		shift = INCVALUE_SHIFT_25MHz;
---
> 		incperiod = INCPERIOD_25MHZ;
> 		incvalue = INCVALUE_25MHZ;
> 		shift = INCVALUE_SHIFT_25MHZ;
4093a4052
> #endif /* HAVE_PTP_1588_CLOCK */
4123d4081
< 	s32 ret_val;
4202a4161
> 		/* fall-through */
4207a4167,4169
> #ifdef HAVE_HWTSTAMP_FILTER_NTP_ALL
> 	case HWTSTAMP_FILTER_NTP_ALL:
> #endif /* HAVE_HWTSTAMP_FILTER_NTP_ALL */
4267,4276d4228
< 	/* Get and set the System Time Register SYSTIM base frequency */
< 	ret_val = e1000e_get_base_timinca(adapter, &regval);
< 	if (ret_val)
< 		return ret_val;
< 	ew32(TIMINCA, regval);
< 
< 	/* reset the ns time counter */
< 	timecounter_init(&adapter->tc, &adapter->cc,
< 			 ktime_to_ns(ktime_get_real()));
< 
4392c4344
< 	rxdctl |= (0x1F | (1 << 8) | E1000_RXDCTL_THRESH_UNIT_DESC);
---
> 	rxdctl |= (0x1F | BIT(8) | E1000_RXDCTL_THRESH_UNIT_DESC);
4436a4389,4439
> #ifdef HAVE_HW_TIME_STAMP
> /**
>  * e1000e_systim_reset - reset the timesync registers after a hardware reset
>  * @adapter: board private structure
>  *
>  * When the MAC is reset, all hardware bits for timesync will be reset to the
>  * default values. This function will restore the settings last in place.
>  * Since the clock SYSTIME registers are reset, we will simply restore the
>  * cyclecounter to the kernel real clock time.
>  **/
> static void e1000e_systim_reset(struct e1000_adapter *adapter)
> {
> #ifdef HAVE_PTP_1588_CLOCK
> 	struct ptp_clock_info *info = &adapter->ptp_clock_info;
> 	struct e1000_hw *hw = &adapter->hw;
> 	unsigned long flags;
> 	u32 timinca;
> 	s32 ret_val;
> 
> 	if (!(adapter->flags & FLAG_HAS_HW_TIMESTAMP))
> 		return;
> 
> 	if (info->adjfreq) {
> 		/* restore the previous ptp frequency delta */
> 		ret_val = info->adjfreq(info, adapter->ptp_delta);
> 	} else {
> 		/* set the default base frequency if no adjustment possible */
> 		ret_val = e1000e_get_base_timinca(adapter, &timinca);
> 		if (!ret_val)
> 			ew32(TIMINCA, timinca);
> 	}
> 
> 	if (ret_val) {
> 		dev_warn(&adapter->pdev->dev,
> 			 "Failed to restore TIMINCA clock rate delta: %d\n",
> 			 ret_val);
> 		return;
> 	}
> 
> 	/* reset the systim ns time counter */
> 	spin_lock_irqsave(&adapter->systim_lock, flags);
> 	timecounter_init(&adapter->tc, &adapter->cc,
> 			 ktime_to_ns(ktime_get_real()));
> 	spin_unlock_irqrestore(&adapter->systim_lock, flags);
> #endif /* HAVE_PTP_1588_CLOCK */
> 
> 	/* restore the previous hwtstamp configuration settings */
> 	e1000e_config_hwtstamp(adapter, &adapter->hwtstamp_config);
> }
> #endif /* HAVE_HW_TIME_STAMP */
> 
4548a4552
> 	case e1000_pch_cnp:
4593c4597
< 	if (hw->mac.type == e1000_pch_spt)
---
> 	if (hw->mac.type >= e1000_pch_spt)
4624,4625c4628,4629
< 	/* initialize systim and reset the ns time counter */
< 	e1000e_config_hwtstamp(adapter, &adapter->hwtstamp_config);
---
> 	/* restore systim and hwtstamp settings */
> 	e1000e_systim_reset(adapter);
4678c4682
< 	if (hw->mac.type == e1000_pch_spt && adapter->int_mode == 0) {
---
> 	if (hw->mac.type >= e1000_pch_spt && adapter->int_mode == 0) {
4713,4722c4717
< 	if (adapter->entl_flag)
< 	{
< 		ENTL_DEBUG("e1000e_up is called on %s, calling entl_e1000_configure\n", adapter->netdev->name );
< 		entl_e1000_configure(adapter);
< 		entl_device_link_up( &adapter->entl_dev ) ;
< 	}
< 	else {
< 		ENTL_DEBUG("e1000e_up is called on %s, calling e1000_configure\n", adapter->netdev->name );
< 		e1000_configure(adapter);		
< 	}
---
> 	e1000_configure(adapter);
4780,4786d4774
< 
< 	if (adapter->entl_flag)
< 	{
< 		ENTL_DEBUG("e1000e_down is called on %s, calling entl_device_link_down \n", adapter->netdev->name );
< 		entl_device_link_down( &adapter->entl_dev ) ;
< 	}
< 
4839c4827
< 		else if (hw->mac.type == e1000_pch_spt)
---
> 		else if (hw->mac.type >= e1000_pch_spt)
4845c4833
< 	else if (hw->mac.type == e1000_pch_spt)
---
> 	else if (hw->mac.type >= e1000_pch_spt)
4857d4844
< 	ENTL_DEBUG("e1000e_reinit_locked on %s, calling e1000e_down and e1000e_up\n", adapter->netdev->name );
4864a4852,4889
>  * e1000e_sanitize_systim - sanitize raw cycle counter reads
>  * @hw: pointer to the HW structure
>  * @systim: time value read, sanitized and returned
>  *
>  * Errata for 82574/82583 possible bad bits read from SYSTIMH/L:
>  * check to see that the time is incrementing at a reasonable
>  * rate and is a multiple of incvalue.
>  **/
> static u64 e1000e_sanitize_systim(struct e1000_hw *hw, u64 systim)
> {
> 	u64 time_delta, rem, temp;
> 	u64 systim_next;
> 	u32 incvalue;
> 	int i;
> 
> 	incvalue = er32(TIMINCA) & E1000_TIMINCA_INCVALUE_MASK;
> 	for (i = 0; i < E1000_MAX_82574_SYSTIM_REREADS; i++) {
> 		/* latch SYSTIMH on read of SYSTIML */
> 		systim_next = (u64)er32(SYSTIML);
> 		systim_next |= (u64)er32(SYSTIMH) << 32;
> 
> 		time_delta = systim_next - systim;
> 		temp = time_delta;
> 		/* VMWare users have seen incvalue of zero, don't div / 0 */
> 		rem = incvalue ? do_div(temp, incvalue) : (time_delta != 0);
> 
> 		systim = systim_next;
> 
> 		if ((time_delta < E1000_82574_SYSTIM_EPSILON) && (rem == 0))
> 			break;
> 	}
> 
> 	return systim;
> }
> #endif /* HAVE_HW_TIME_STAMP */
> 
> #ifdef HAVE_HW_TIME_STAMP
> /**
4868c4893
< static cycle_t e1000e_cyclecounter_read(const struct cyclecounter *cc)
---
> static u64 e1000e_cyclecounter_read(const struct cyclecounter *cc)
4873,4874c4898,4899
< 	u32 systimel_1, systimel_2, systimeh;
< 	cycle_t systim, systim_next;
---
> 	u32 systimel, systimeh;
> 	u64 systim;
4881c4906
< 	systimel_1 = er32(SYSTIML);
---
> 	systimel = er32(SYSTIML);
4883,4894c4908,4917
< 	systimel_2 = er32(SYSTIML);
< 	/* Check for overflow. If there was no overflow, use the values */
< 	if (systimel_1 < systimel_2) {
< 		systim = (cycle_t)systimel_1;
< 		systim |= (cycle_t)systimeh << 32;
< 	} else {
< 		/* There was an overflow, read again SYSTIMH, and use
< 		 * systimel_2
< 		 */
< 		systimeh = er32(SYSTIMH);
< 		systim = (cycle_t)systimel_2;
< 		systim |= (cycle_t)systimeh << 32;
---
> 	/* Is systimel is so large that overflow is possible? */
> 	if (systimel >= (u32)0xffffffff - E1000_TIMINCA_INCVALUE_MASK) {
> 		u32 systimel_2 = er32(SYSTIML);
> 		if (systimel > systimel_2) {
> 			/* There was an overflow, read again SYSTIMH, and use
> 			 * systimel_2
> 			 */
> 			systimeh = er32(SYSTIMH);
> 			systimel = systimel_2;
> 		}
4895a4919,4920
> 	systim = (u64)systimel;
> 	systim |= (u64)systimeh << 32;
4897,4915c4922,4923
< 	if ((hw->mac.type == e1000_82574) || (hw->mac.type == e1000_82583)) {
< 		u64 incvalue, time_delta, rem, temp;
< 		int i;
< 
< 		/* errata for 82574/82583 possible bad bits read from SYSTIMH/L
< 		 * check to see that the time is incrementing at a reasonable
< 		 * rate and is a multiple of incvalue
< 		 */
< 		incvalue = er32(TIMINCA) & E1000_TIMINCA_INCVALUE_MASK;
< 		for (i = 0; i < E1000_MAX_82574_SYSTIM_REREADS; i++) {
< 			/* latch SYSTIMH on read of SYSTIML */
< 			systim_next = (cycle_t)er32(SYSTIML);
< 			systim_next |= (cycle_t)er32(SYSTIMH) << 32;
< 
< 			time_delta = systim_next - systim;
< 			temp = time_delta;
< 			rem = do_div(temp, incvalue);
< 
< 			systim = systim_next;
---
> 	if (adapter->flags2 & FLAG2_CHECK_SYSTIM_OVERFLOW)
> 		systim = e1000e_sanitize_systim(hw, systim);
4917,4921d4924
< 			if ((time_delta < E1000_82574_SYSTIM_EPSILON) &&
< 			    (rem == 0))
< 				break;
< 		}
< 	}
5106c5109
<  * e1000_open - Called when a network interface is made active
---
>  * e1000e_open - Called when a network interface is made active
5117c5120
< static int e1000_open(struct net_device *netdev)
---
> int e1000e_open(struct net_device *netdev)
5176,5182c5179
< 	if (adapter->entl_flag)
< 	{
< 		entl_e1000_configure(adapter);
< 	}
< 	else {
< 		e1000_configure(adapter);		
< 	}	
---
> 	e1000_configure(adapter);
5241c5238
<  * e1000_close - Disables a network interface
---
>  * e1000e_close - Disables a network interface
5251c5248
< static int e1000_close(struct net_device *netdev)
---
> int e1000e_close(struct net_device *netdev)
5630,5631c5627
< 	if ((hw->mac.type == e1000_pch_lpt) ||
< 	    (hw->mac.type == e1000_pch_spt)) {
---
> 	if (hw->mac.type >= e1000_pch_lpt) {
5813,5815d5808
< 	// AK: force to read from hw
< 	// adapter->hw.mac.get_link_status = true ;
< 
5935,5941d5927
< 			// AK: tell ENTL state machine 
< 			if (adapter->entl_flag)
< 			{
< 				ENTL_DEBUG( "%s e1000_watchdog_task calling entl_device_link_up\n", adapter->netdev->name ) ;
< 				entl_device_link_up( &adapter->entl_dev ) ;
< 			}
< 
5957,5963d5942
< 			// AK: tell ENTL state machine 
< 			if (adapter->entl_flag)
< 			{
< 	    		ENTL_DEBUG( "%s e1000_watchdog_task calling entl_device_link_down\n", adapter->netdev->name ) ;
< 				entl_device_link_down( &adapter->entl_dev ) ;
< 			}
< 
5968,5969c5947
< 			if (adapter->flags & FLAG_RX_NEEDS_RESTART) {
< 	    		ENTL_DEBUG( "%s e1000_watchdog_task setting FLAG_RESTART_NOW\n", adapter->netdev->name ) ;				
---
> 			if (adapter->flags & FLAG_RX_NEEDS_RESTART)
5971d5948
< 			}
6015,6016c5992
< 	    (e1000_desc_unused(tx_ring) + 1 < tx_ring->count)) {
< 		ENTL_DEBUG( "%s e1000_watchdog_task setting FLAG_RESTART_NOW here netif_carrier_ok %d tx_ring->next_to_clean %d tx_ring->next_to_use %d tx_ring->count %d \n", adapter->netdev->name, netif_carrier_ok(netdev), tx_ring->next_to_clean, tx_ring->next_to_use, tx_ring->count ) ;				
---
> 	    (e1000_desc_unused(tx_ring) + 1 < tx_ring->count))
6019,6020d5994
< 	}
< 
6023,6024d5996
< 	    ENTL_DEBUG( "%s e1000_watchdog_task schedules adapter->reset_task for FLAG_RESTART_NOW\n", adapter->netdev->name ) ;
< 
6487d6458
< 	unsigned long flags;
6505,6510d6475
< 	if (adapter->entl_flag)
< 	{
< 		// AK: packet modification for ENTL connection
< 		entl_device_process_tx_packet( &adapter->entl_dev, skb ) ;
< 	}
< 
6558,6560d6522
< #ifndef ENTL_TX_ON_ENTL_ENABLE
< 	// flow control is done on tx queue side when TX_ON_ENTL_ENABLE
< 
6564,6569c6526
< 	if (e1000_maybe_stop_tx(tx_ring, count + 2)) {
< 		if (adapter->entl_flag)
< 		{
< 			// AK: don't forget to unlock before returning
< 	    	spin_unlock_irqrestore( &adapter->tx_ring_lock, flags ) ;    	
< 	   	}		
---
> 	if (e1000_maybe_stop_tx(tx_ring, count + 2))
6571,6573d6527
< 	}
< 
< #endif
6582,6588d6535
< 
< 	// AK: use spin_lock to protext tx_ring. (assuming this is not on ISR context)
< 	if (adapter->entl_flag)
< 	{
< 		spin_lock_irqsave( &adapter->tx_ring_lock, flags ) ;	
< 	}
< 
6620,6630c6567,6579
< 		if (unlikely((skb_shinfo(skb)->tx_flags.flags &
< 			      SKBTX_HW_TSTAMP) &&
< 			     (adapter->flags & FLAG_HAS_HW_TIMESTAMP) &&
< 			     !adapter->tx_hwtstamp_skb)) {
< 			skb_shinfo(skb)->tx_flags.flags |= SKBTX_IN_PROGRESS;
< 			tx_flags |= E1000_TX_FLAGS_HWTSTAMP;
< 			adapter->tx_hwtstamp_skb = skb_get(skb);
< 			adapter->tx_hwtstamp_start = jiffies;
< 			schedule_work(&adapter->tx_hwtstamp_work);
< 		} else {
< 			skb_tx_timestamp(skb);
---
> 		if (unlikely(skb_shinfo(skb)->tx_flags.flags &
> 			     SKBTX_HW_TSTAMP) &&
> 		    (adapter->flags & FLAG_HAS_HW_TIMESTAMP)) {
> 			if (!adapter->tx_hwtstamp_skb) {
> 				skb_shinfo(skb)->tx_flags.flags |=
> 				    SKBTX_IN_PROGRESS;
> 				tx_flags |= E1000_TX_FLAGS_HWTSTAMP;
> 				adapter->tx_hwtstamp_skb = skb_get(skb);
> 				adapter->tx_hwtstamp_start = jiffies;
> 				schedule_work(&adapter->tx_hwtstamp_work);
> 			} else {
> 				adapter->tx_hwtstamp_skipped++;
> 			}
6631a6581,6582
> 
> 		skb_tx_timestamp(skb);
6634,6642c6585,6594
< 		    (adapter->flags & FLAG_HAS_HW_TIMESTAMP) &&
< 		    !adapter->tx_hwtstamp_skb) {
< 			skb_shinfo(skb)->tx_flags |= SKBTX_IN_PROGRESS;
< 			tx_flags |= E1000_TX_FLAGS_HWTSTAMP;
< 			adapter->tx_hwtstamp_skb = skb_get(skb);
< 			adapter->tx_hwtstamp_start = jiffies;
< 			schedule_work(&adapter->tx_hwtstamp_work);
< 		} else {
< 			skb_tx_timestamp(skb);
---
> 		    (adapter->flags & FLAG_HAS_HW_TIMESTAMP)) {
> 			if (!adapter->tx_hwtstamp_skb) {
> 				skb_shinfo(skb)->tx_flags |= SKBTX_IN_PROGRESS;
> 				tx_flags |= E1000_TX_FLAGS_HWTSTAMP;
> 				adapter->tx_hwtstamp_skb = skb_get(skb);
> 				adapter->tx_hwtstamp_start = jiffies;
> 				schedule_work(&adapter->tx_hwtstamp_work);
> 			} else {
> 				adapter->tx_hwtstamp_skipped++;
> 			}
6643a6596,6597
> 
> 		skb_tx_timestamp(skb);
6677a6632
> #ifndef HAVE_TRANS_START_IN_QUEUE
6679,6684c6634
< 
< 	if (adapter->entl_flag)
< 	{
< 		// AK: don't forget to unlock before returning
<     	spin_unlock_irqrestore( &adapter->tx_ring_lock, flags ) ;    	
<    	}
---
> #endif
6715,6716d6664
< 	ENTL_DEBUG("e1000_reset_task on %s, calling e1000e_reinit_locked\n", adapter->netdev->name );
< 
6727a6676,6679
> #ifdef HAVE_VOID_NDO_GET_STATS64
> void e1000e_get_stats64(struct net_device *netdev,
> 			struct rtnl_link_stats64 *stats)
> #else
6729a6682
> #endif				/* HAVE_VOID_NDO_GET_STATS64 */
6765a6719
> #ifndef HAVE_VOID_NDO_GET_STATS64
6766a6721
> #endif /* HAVE_VOID_NDO_GET_STATS64 */
6862,6863c6817
< 	if (netif_running(netdev)) {
< 		ENTL_DEBUG("e1000_change_mtu on %s, calling e1000e_down and e1000e_up\n", adapter->netdev->name );
---
> 	if (netif_running(netdev))
6865d6818
< 	}
7035,7042d6987
< 	case SIOCDEVPRIVATE_ENTL_RD_CURRENT:
< 	case SIOCDEVPRIVATE_ENTL_RD_ERROR:
< 	case SIOCDEVPRIVATE_ENTL_SET_SIGRCVR:
< 	case SIOCDEVPRIVATE_ENTL_GEN_SIGNAL:
< 	case SIOCDEVPRIVATE_ENTL_DO_INIT:
< 	case SIOCDEVPRIVATE_ENTT_SEND_AIT:
< 	case SIOCDEVPRIVATE_ENTT_READ_AIT:
< 		return entl_do_ioctl(netdev, ifr, cmd);		
7242,7243c7187
< 	} else if ((hw->mac.type == e1000_pch_lpt) ||
< 		   (hw->mac.type == e1000_pch_spt)) {
---
> 	} else if (hw->mac.type >= e1000_pch_lpt) {
7524,7525d7467
< 		ENTL_DEBUG("e1000e_pm_thaw on %s, calling e1000e_up\n", adapter->netdev->name );
< 
7539c7481
< #endif
---
> #endif				/* USE_LEGACY_PM_SUPPORT */
7542a7485
> 	int rc;
7546a7490,7495
> 
> 	rc = __e1000_shutdown(pdev, false);
> 	if (rc)
> 		e1000e_pm_thaw(dev);
> 
> 	return rc;
7551,7552d7499
< #endif
< 
7553a7501
> #endif /* USE_LEGACY_PM_SUPPORT */
7610,7612c7558
< 	if (netdev->flags & IFF_UP) {
< 		ENTL_DEBUG("e1000e_pm_runtime_resume on %s, calling e1000e_up\n", adapter->netdev->name );
< 
---
> 	if (netdev->flags & IFF_UP)
7614d7559
< 	}
7674,7675c7619
< 	if (netdev->flags & IFF_UP) {
< 		ENTL_DEBUG("e1000e_pm_runtime_resume on %s, calling e1000e_up\n", adapter->netdev->name );
---
> 	if (netdev->flags & IFF_UP)
7677d7620
< 	}
7900,7901c7843
< 	if (netif_running(netdev)) {
< 		ENTL_DEBUG("e1000_io_resume on %s, calling e1000e_up\n", adapter->netdev->name );		
---
> 	if (netif_running(netdev))
7903d7844
< 	}
7953c7894
< 	if (!ret_val && (!(buf & (1 << 0)))) {
---
> 	if (!ret_val && (!(buf & BIT(0)))) {
7971a7913,7928
> 	/* Since there is no support for separate Rx/Tx vlan accel
> 	 * enable/disable make sure Tx flag is always in same state as Rx.
> 	 */
> #ifdef NETIF_F_HW_VLAN_CTAG_RX
> 	if (features & NETIF_F_HW_VLAN_CTAG_RX)
> 		features |= NETIF_F_HW_VLAN_CTAG_TX;
> 	else
> 		features &= ~NETIF_F_HW_VLAN_CTAG_TX;
> #endif
> #ifdef NETIF_F_HW_VLAN_RX
> 	if (features & NETIF_F_HW_VLAN_RX)
> 		features |= NETIF_F_HW_VLAN_TX;
> 	else
> 		features &= ~NETIF_F_HW_VLAN_TX;
> #endif
> 
8011,8012c7968
< 	if (netif_running(netdev)) {
< 		ENTL_DEBUG("e1000_set_features on %s, calling e1000e_reinit_locked\n", adapter->netdev->name );
---
> 	if (netif_running(netdev))
8014,8016c7970
< 	}
< 	else {
< 		ENTL_DEBUG("e1000_set_features on %s, calling e1000e_reset\n", adapter->netdev->name );
---
> 	else
8018d7971
< 	}
8026,8031c7979,7980
< 	.ndo_open		= e1000_open,
< 	.ndo_stop		= e1000_close,
< 
< #ifdef ENTL_TX_ON_ENTL_ENABLE
< 	.ndo_start_xmit		= entl_tx_transmit,
< #else
---
> 	.ndo_open		= e1000e_open,
> 	.ndo_stop		= e1000e_close,
8033,8034d7981
< #endif
< 
8098c8045
< 	s32 rval = 0;
---
> 	s32 ret_val = 0;
8168,8173c8115,8135
< 	// AK: initialize lock for tx_ring
< 	spin_lock_init( &adapter->tx_ring_lock ) ;
< 	// AK: initialize entl device
< 	entl_device_init( &adapter->entl_dev ) ;
< 	// AK: default, entl mode is enabled 
< 	adapter->entl_flag = 1 ;
---
> 	/* Workaround FLR issues for 82579
> 	 * This code disables the FLR (Function Level Reset) via PCIe, in order
> 	 * to workaround a bug found while using device passthrough, where the
> 	 * interface would become non-responsive.
> 	 * NOTE: the FLR bit is Read/Write Once (RWO) in config space, so if
> 	 * the BIOS or kernel writes this register * then this workaround will
> 	 * not work.
> 	 */
> 	if (hw->mac.type == e1000_pch2lan) {
> 		int pos = pci_find_capability(pdev, PCI_CAP_ID_AF);
> 
> 		if (pos) {
> 			u8 cap;
> 
> 			pci_read_config_byte(pdev, pos + PCI_AF_CAP, &cap);
> 			cap = cap & (~PCI_AF_CAP_FLR);
> 			pci_write_config_byte(pdev, pos + PCI_AF_CAP, cap);
> 		} else {
> 			e_info("PCI AF capability not found\n");
> 		}
> 	}
8201,8206c8163,8164
< 	netdev->open = &e1000_open;
< 	netdev->stop = &e1000_close;
< 
< #ifdef ENTL_TX_ON_ENTL_ENABLE
< 	netdev->hard_start_xmit = &entl_tx_transmit;
< #else
---
> 	netdev->open = &e1000e_open;
> 	netdev->stop = &e1000e_close;
8208,8209d8165
< #endif
< 
8388,8390d8343
< 	// AK: Setting MAC address for Hello handling
< 	entl_e1000_set_my_addr( &adapter->entl_dev, netdev->dev_addr ) ;
< 
8428,8430c8381,8383
< 			rval = e1000_read_nvm(&adapter->hw,
< 					      NVM_INIT_CONTROL3_PORT_B,
< 					      1, &eeprom_data);
---
> 			ret_val = e1000_read_nvm(&adapter->hw,
> 						 NVM_INIT_CONTROL3_PORT_B,
> 						 1, &eeprom_data);
8432,8434c8385,8387
< 			rval = e1000_read_nvm(&adapter->hw,
< 					      NVM_INIT_CONTROL3_PORT_A,
< 					      1, &eeprom_data);
---
> 			ret_val = e1000_read_nvm(&adapter->hw,
> 						 NVM_INIT_CONTROL3_PORT_A,
> 						 1, &eeprom_data);
8438,8439c8391,8393
< 	if (rval)
< 		e_dbg("NVM read error getting WoL initial values: %d\n", rval);
---
> 	if (ret_val)
> 		e_dbg("NVM read error getting WoL initial values: %d\n",
> 		      ret_val);
8473c8427
< 	rval = e1000_read_nvm(&adapter->hw, 5, 1, &adapter->eeprom_vers);
---
> 	ret_val = e1000_read_nvm(&adapter->hw, 5, 1, &adapter->eeprom_vers);
8475,8476c8429,8430
< 	if (rval) {
< 		e_dbg("NVM read error getting EEPROM version: %d\n", rval);
---
> 	if (ret_val) {
> 		e_dbg("NVM read error getting EEPROM version: %d\n", ret_val);
8479a8434,8436
> 	/* init PTP hardware clock */
> 	e1000e_ptp_init(adapter);
> 
8498,8500d8454
< 	/* init PTP hardware clock */
< 	e1000e_ptp_init(adapter);
< 
8712a8667,8670
> 	{ PCI_VDEVICE(INTEL, E1000_DEV_ID_PCH_CNP_I219_LM6), board_pch_cnp },
> 	{ PCI_VDEVICE(INTEL, E1000_DEV_ID_PCH_CNP_I219_V6), board_pch_cnp },
> 	{ PCI_VDEVICE(INTEL, E1000_DEV_ID_PCH_CNP_I219_LM7), board_pch_cnp },
> 	{ PCI_VDEVICE(INTEL, E1000_DEV_ID_PCH_CNP_I219_V7), board_pch_cnp },
8771,8774c8729
< 	pr_info("Copyright(c) 1999 - 2016 Intel Corporation.\n");
< 
< 	pr_info("Earth Computing ENTL extension (Demo 4)\n" ) ;
< 	pr_info("Copyright(c) 2016 Earth Computing.\n");
---
> 	pr_info("Copyright(c) 1999 - 2017 Intel Corporation.\n");
8802,8806c8757,8758
< // AK: including ENTL device code
< #include "entl_device.c"
< 
< MODULE_AUTHOR("Intel Corporation, <linux.nics@intel.com> + Earth Computing");
< MODULE_DESCRIPTION("Intel(R) PRO/1000 Network Driver with Earth Computing Extension Demo4");
---
> MODULE_AUTHOR("Intel Corporation, <linux.nics@intel.com>");
> MODULE_DESCRIPTION("Intel(R) PRO/1000 Network Driver");
